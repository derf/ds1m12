#!/usr/bin/env perl

use strict;
use warnings;
use 5.014;
use Net::Pcap qw(:functions);

our $VERSION = '0.00';

my $cnt    = 0;
my $format = <<'EOF';
	H16 # ID
	C   # type
	C   # transtype
	C   # endpoint
	C   # device
	S   # bus ID
	C   # request
	C   # data?
	H16 # seconds
	L   # usecs
	L   # status
	L   # length
	L   # data length
	C   # bmReqType
	C   # bRequest
	S   # wValue
	S   # wIndex
	S   # wLength
	H*  # data
EOF

my %transfer_type = (
	1 => 'URB_INTERRUPT',
	2 => 'URB_CONTROL',
	3 => 'URB_BULK',
);

sub process_packet {
	my ( $user_data, $header, $packet ) = @_;

	my (
		$id,     $type,   $transtype,   $endpoint, $device,
		$busid,  $req,    $dataflag,    $sec,      $usec,
		$status, $length, $datalength,, $bmreqtype,
		$breq,   $wvalue, $windex,      $wlen,     $data
	) = unpack( $format, $packet );

	$cnt++;

	if ( $device != 14 ) {
		return;
	}

	printf( "    ID %s (%d)\n  type %c\n ttype %d\n",
		$id, $cnt, $type, $transtype );
	printf( "    ep %02x\n   dev %3d\n busid %02x\n",
		$endpoint, $device, $busid );
	printf( "  sreq %s\n data? %02x\nstatus %s\n", $req, $dataflag, $status );
	printf( "   len %s\n  dlen %s\n", $length, $datalength );
	printf( "brtype %02x\n", $bmreqtype );
	printf( "  breq %d\nwvalue %d\nwindex %d\n", $breq, $wvalue, $windex );
	printf( "  wlen %s\n  data %s\n\n", $wlen || 0, $data // q{} );

	#	say unpack("W*", $packet);
}

my $err;
my $pcap = pcap_open_offline( 'ds1m12', \$err );

pcap_loop( $pcap, -1, \&process_packet, undef );

pcap_close($pcap);

__END__

=head1 NAME

=head1 SYNOPSIS

=head1 VERSION

=head1 DESCRIPTION

=head1 OPTIONS

=over

=back

=head1 EXIT STATUS

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

=over

=back

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Copyright (C) 2013 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
